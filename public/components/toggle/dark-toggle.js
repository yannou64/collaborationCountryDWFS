/**
 * @fileoverview Gestionnaire du th√®me sombre/clair
 * @module toggle-dark
 * @description Ce module g√®re le basculement entre le mode sombre et clair,
 * ainsi que la persistance de la pr√©f√©rence utilisateur.
 */

import { saveTheme, loadTheme } from "../../services/local-storage.js";

const THEME_KEY = 'theme';

/**
 * G√®re le basculement entre le mode sombre et clair
 * @function toggleDarkMode
 * @description Bascule la classe 'dark' sur l'√©l√©ment HTML, met √† jour l'ic√¥ne et sauvegarde la pr√©f√©rence
 * @returns {void}
 * @throws {Error} Si l'√©l√©ment toggle n'est pas trouv√© dans le DOM
 */
export const toggleDarkMode = () => {
    console.log('[DEBUG] toggleDarkMode - D√©but du basculement du th√®me');
    
    const html = document.documentElement;
    const toggle = document.getElementById('theme-toggle');
    
    if (!toggle) {
        console.error('[ERROR] √âl√©ment theme-toggle non trouv√©');
        throw new Error('√âl√©ment theme-toggle non trouv√©');
    }

    const isDark = html.classList.toggle('dark');
    console.log('[DEBUG] Nouveau th√®me:', isDark ? 'sombre' : 'clair');
    
    // Mise √† jour de l'ic√¥ne
    if (isDark) {
        console.log('[DEBUG] Mise √† jour de l\'ic√¥ne vers mode sombre');
        toggle.innerHTML = 'üåô';
        saveTheme('dark');
    } else {
        console.log('[DEBUG] Mise √† jour de l\'ic√¥ne vers mode clair');
        toggle.innerHTML = '‚òÄÔ∏è';
        saveTheme('light');
    }
    
    console.log('[DEBUG] Th√®me sauvegard√© avec succ√®s');
};

/**
 * Initialise le th√®me au chargement de la page
 * @function initTheme
 * @description V√©rifie le th√®me sauvegard√© et applique les param√®tres appropri√©s
 * @returns {void}
 * @throws {Error} Si l'√©l√©ment toggle n'est pas trouv√© dans le DOM
 */
export const initTheme = () => {
    console.log('[DEBUG] initTheme - Initialisation du th√®me');
    
    const savedTheme = loadTheme();
    console.log('[DEBUG] Th√®me sauvegard√©:', savedTheme);
    
    const html = document.documentElement;
    const toggle = document.getElementById('theme-toggle');
    
    if (!toggle) {
        console.error('[ERROR] √âl√©ment theme-toggle non trouv√©');
        throw new Error('√âl√©ment theme-toggle non trouv√©');
    }
    
    if (savedTheme === 'dark') {
        console.log('[DEBUG] Application du th√®me sombre');
        html.classList.add('dark');
        toggle.innerHTML = 'üåô';
    } else {
        console.log('[DEBUG] Application du th√®me clair');
        html.classList.remove('dark');
        toggle.innerHTML = '‚òÄÔ∏è';
    }
    
    console.log('[DEBUG] Th√®me initialis√© avec succ√®s');
};

/**
 * Initialise le composant de th√®me
 * @function initThemeComponent
 * @description Ajoute les √©couteurs d'√©v√©nements n√©cessaires
 * @returns {void}
 */
export const initThemeComponent = () => {
    console.log('[DEBUG] initThemeComponent - Initialisation du composant de th√®me');
    
    document.addEventListener('DOMContentLoaded', () => {
        console.log('[DEBUG] DOM charg√©, initialisation du th√®me');
        initTheme();
    });
    
    const toggle = document.getElementById('theme-toggle');
    if (toggle) {
        console.log('[DEBUG] Ajout de l\'√©couteur d\'√©v√©nement sur le bouton de th√®me');
        toggle.addEventListener('click', toggleDarkMode);
    } else {
        console.error('[ERROR] √âl√©ment theme-toggle non trouv√© lors de l\'initialisation');
    }
};
